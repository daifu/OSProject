Group:
	Tai Pham	603897752
	Daifu Ye	403910231

We provide 2 more tests as specify in the lab description, named test_b.sh and test_c.sh

Lab1a: 
	The command-stream is built as a tree-like structure, for example: a || b | c is
											||
										/		 \
									a				|
												/		\
												b		c

	Then the command is read from the top level, which is and-or command. It include a lot of error checking, sometimes
	redundant but necessary to make sure that the syntax passed is correct
	- Limitation: since we don't have a reliable test cases for sequence and subshell command (the test-ok do not provide
		us test cases for these 2 type of command), we have to test it with our own knowledge and not sure if it cover all
		possible cases

Lab1b:
	No known limitation, all of the text cases run good

Lab1c:
	We dont know how to test the program effieciently, but all of our test cases return the same result as lab1b
	We did this lab as the discussion. First, we construct a dependency array which A[a,b] = 1 if a requires b
	to finish before it executes. The array grow dynamically as the program grows. We also change the main so that in time
	travel mode, it reads the whole command stream and create a graph node base on each command. Each command maintain its 
	dependency count and only executed if this count equal to 0 ( this count is count based on the dependency array). The 
	dependency is only as the top level command. Beside, as Prof. Eggert said, something like:
	echo a > b
	cat b
	is undefined behavior, we actually count it as a dependency, so it might run as sequential.
	As a conclusion, we did all the functionality of the lab1c.
